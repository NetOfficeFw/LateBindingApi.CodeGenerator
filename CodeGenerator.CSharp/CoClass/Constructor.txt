		#region Fields
		
		private NetRuntimeSystem.Runtime.InteropServices.ComTypes.IConnectionPoint _connectPoint;
		private string _activeSinkId;
		private NetRuntimeSystem.Type _thisType;
%sinkHelperDefine%	
		#endregion

		#region Type Information

        /// <summary>
        /// Instance Type
        /// </summary>
        public override Type InstanceType
        {
            get
            {
                return LateBindingApiWrapperType;
            }
        }

        private static Type _type;
		
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public static Type LateBindingApiWrapperType
        {
            get
            {
                if (null == _type)
                    _type = typeof(%name%);
                return _type;
            }
        }
        
        #endregion
        		
		#region Construction

		///<param name="factory">current used factory core</param>
		///<param name="parentObject">object there has created the proxy</param>
        ///<param name="comProxy">inner wrapped COM proxy</param>
		public %name%(Core factory, ICOMObject parentObject, object comProxy) : base(factory, parentObject, comProxy)
		{
			%callQuitInDispose%%setGlobalInstance%
		}

        ///<param name="parentObject">object there has created the proxy</param>
        ///<param name="comProxy">inner wrapped COM proxy</param>
		public %name%(ICOMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
			%callQuitInDispose%%setGlobalInstance%
		}

		///<param name="factory">current used factory core</param>
		///<param name="parentObject">object there has created the proxy</param>
        ///<param name="comProxy">inner wrapped COM proxy</param>
        ///<param name="comProxyType">Type of inner wrapped COM proxy"</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public %name%(Core factory, ICOMObject parentObject, object comProxy, NetRuntimeSystem.Type comProxyType) : base(factory, parentObject, comProxy, comProxyType)
		{
			%callQuitInDispose%
		}

		///<param name="parentObject">object there has created the proxy</param>
        ///<param name="comProxy">inner wrapped COM proxy</param>
        ///<param name="comProxyType">Type of inner wrapped COM proxy"</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public %name%(ICOMObject parentObject, object comProxy, NetRuntimeSystem.Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
			%callQuitInDispose%
		}
		
		///<param name="replacedObject">object to replaced. replacedObject are not usable after this action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public %name%(ICOMObject replacedObject) : base(replacedObject)
		{
			%callQuitInDispose%
		}
		
		/// <summary>
        /// Creates a new instance of %name% 
        /// </summary>		
		public %name%():base("%ProgId%")
		{
			%callQuitInDispose%%setGlobalInstance%
		}
		
		/// <summary>
        /// Creates a new instance of %name%
        /// </summary>
        ///<param name="progId">registered ProgID</param>
		public %name%(string progId):base(progId)
		{
			%callQuitInDispose%%setGlobalInstance%
		}
%disposeGlobalInstance%
        #endregion

        #region Static CoClass Methods

		/// <summary>
        /// Returns all running %ProgId% instances from the environment/system
        /// </summary>
        /// <returns>%ProgId% sequence</returns>
		public static NetOffice.%Component%Api.%Class%[] GetActiveInstances()
		{
			IDisposableEnumeration proxyList = NetOffice.ProxyService.GetActiveInstances("%Component%","%Class%");
			NetRuntimeSystem.Collections.Generic.List<NetOffice.%Component%Api.%Class%> resultList = new NetRuntimeSystem.Collections.Generic.List<NetOffice.%Component%Api.%Class%>();
			foreach(object proxy in proxyList)
				resultList.Add( new NetOffice.%Component%Api.%Class%(null, proxy) );
			return resultList.ToArray();
		}

		/// <summary>
        /// Returns a running %ProgId% object from the environment/system.
        /// </summary>
        /// <returns>an %ProgId% object or null</returns>
		public static NetOffice.%Component%Api.%Class% GetActiveInstance()
		{
			object proxy  = NetOffice.ProxyService.GetActiveInstance("%Component%","%Class%", false);
			if(null != proxy)
				return new NetOffice.%Component%Api.%Class%(null, proxy);
			else
				return null;
		}

		/// <summary>
        /// Returns a running %ProgId% object from the environment/system. 
        /// </summary>
	    /// <param name="throwOnError">throw an exception if no object was found</param>
        /// <returns>an %ProgId% object or null</returns>
		public static NetOffice.%Component%Api.%Class% GetActiveInstance(bool throwOnError)
		{
			object proxy  = NetOffice.ProxyService.GetActiveInstance("%Component%","%Class%", throwOnError);
			if(null != proxy)
				return new NetOffice.%Component%Api.%Class%(null, proxy);
			else
				return null;
		}
		#endregion