using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using DiffMatchPatch;
using NUnit.Framework;

namespace NetOfficeVerify
{
    public abstract class ProjectTestContext
    {
        public static readonly Lazy<string> GoldProjectBaseDir = new Lazy<string>(() => GetProjectBaseDir("GOLD_PROJECT_DIR", @"c:\dev\github\NetOfficeFw\NetOffice-v1.7.4.3\Source\"));
        public static readonly Lazy<string> GeneratedProjectBaseDir = new Lazy<string>(() => GetProjectBaseDir("GENERATED_PROJECT_DIR", @"c:\dev\github\NetOfficeFw\LateBindingApi.CodeGenerator\out\NetOffice\"));

        public ProjectTestContext(string projectName)
        {
            this.ProjectName = projectName;

            this.GeneratedProjectDir = GeneratedProjectBaseDir.Value + projectName;
            this.GoldProjectDir = GoldProjectBaseDir.Value + projectName;
        }

        public static string GetProjectBaseDir(string name, string defaultPath)
        {
            var param = TestContext.Parameters[name];
            if (String.IsNullOrEmpty(param))
            {
                return defaultPath;
            }

            return param;
        }

        /// <summary>
        /// Directory name with source code generated by LateBindingApi tool.
        /// </summary>
        public string GeneratedProjectDir { get; private set; }

        /// <summary>
        /// Directory name with gold source code of NetOffice project.
        /// </summary>
        public string GoldProjectDir { get; private set; }

        public string ProjectName { get; private set; }

        protected void VerifyCoClassDelegatesInFile(string filename)
        {
            var generatedFile = Path.Combine(this.GeneratedProjectDir, "Classes", filename);
            var goldFile = Path.Combine(this.GoldProjectDir, "Classes", filename);

            var actualDelegates = GetDelegatesFromFile(generatedFile);
            var expectedDelegates = GetDelegatesFromFile(goldFile);

            var dmp = new diff_match_patch();
            var diff = dmp.diff_main(expectedDelegates, actualDelegates);
            dmp.diff_cleanupSemantic(diff);

            if (diff.Count == 1)
            {
                if (diff[0].operation == Operation.EQUAL)
                {
                    // passed
                    return;
                }
            }

            if (diff.Count > 0)
            {
                var delta = dmp.diff_prettyText(diff);
                var batFilename = GenerateCommandFileForDiff(generatedFile, goldFile);

                var msg = $"Delegates in file {this.ProjectName}\\Classes\\{filename} does not match the gold file definition.\n\n" +
                          $"Run diff file:///{batFilename}\n\n" +
                          $"Changes:\n" +
                          $"{delta}\n\n" +
                          $"Gold file: {goldFile}";
                Assert.Fail(msg);
            }
        }

        protected void AssertDiff(string expectedText, string actualText, string goldFilePath, string generatedFilePath, string message)
        {
            var dmp = new diff_match_patch();
            var diff = dmp.diff_main(expectedText, actualText);
            dmp.diff_cleanupSemantic(diff);

            if (diff.Count == 1)
            {
                if (diff[0].operation == Operation.EQUAL)
                {
                    // passed
                    return;
                }
            }

            if (diff.Count > 0)
            {
                if (diff.Where(d => d.operation != Operation.EQUAL).All(d => string.IsNullOrWhiteSpace(d.text)))
                {
                    Assert.Pass();
                }

                var delta = dmp.diff_prettyText(diff);
                var batFilename = GenerateCommandFileForDiff(goldFilePath, generatedFilePath);

                var msg = message + "\n\n" +
                          $"Run diff file:///{batFilename}\n\n" +
                          $"Changes:\n" +
                          $"{delta}\n\n" +
                          $"Gold file: {goldFilePath}";
                Assert.Fail(msg);
            }
        }

        protected string GetDelegatesFromFile(string path)
        {
            return this.GetRegionFromFile(path, "#region Delegates");
        }

        protected string GetEventBindingRegionFromFile(string path)
        {
            return this.GetRegionFromFile(path, "#region IEventBinding");
        }

        protected string GetRegionFromFile(string path, string region)
        {
            var sb = new StringBuilder();

            bool read = false;
            foreach (var line in File.ReadLines(path))
            {
                if (line.TrimStart().StartsWith(region))
                {
                    read = true;
                    continue;
                }

                if (read)
                {
                    if (line.TrimStart().StartsWith("#endregion"))
                    {
                        break;
                    }

                    sb.AppendLine(line);
                }
            }

            return sb.ToString();
        }

        protected string GenerateCommandFileForDiff(string generatedFile, string goldFile)
        {
            var batFilename = Path.Combine(Path.GetTempPath(), "run_diff_"+ Path.GetRandomFileName() + ".bat");

            string commandLine = $@"WinMergeU.exe /u /e ""{generatedFile}"" ""{goldFile}""";
            File.WriteAllText(batFilename, commandLine);

            return batFilename;
        }

        public static IEnumerable<string> ProjectCoClassFiles(string projectName)
        {
            var goldProjectDir = Path.Combine(GoldProjectBaseDir.Value, projectName, "Classes");

            var files = Directory.EnumerateFiles(goldProjectDir, "*.cs");
            return files.Select(Path.GetFileName);
        }
    }
}
