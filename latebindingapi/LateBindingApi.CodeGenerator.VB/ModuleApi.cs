using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using System.Text;

namespace LateBindingApi.CodeGenerator.VB
{
    internal static class ModuleApi
    {
        private static string _fileHeader = "'Generated by LateBindingApi.CodeGenerator\r\n"
                                           + "Imports System\r\n"
                                           + "Imports NetRuntimeSystem = System\r\n"
                                           + "Imports System.ComponentModel\r\n"
                                           + "Imports System.Runtime.CompilerServices\r\n"
                                           + "Imports System.Runtime.InteropServices\r\n"
                                           + "Imports System.Reflection\r\n"
                                           + "Imports System.Collections.Generic\r\n"
                                           + "Imports LateBindingApi.Core\r\n\r\n"
                                           + "Namespace %namespace%\r\n"
                                           + "\r\n";

        private static string _fieldHeader = "#Region \"Fields\"\r\n\r\n" +
                                     "\t\tPrivate _instance As COMObject\r\n\r\n" +
                                     "\t\tFriend Property Instance As COMObject\r\n" +
                                      "\t\t\tGet\r\n" +
                                      "\t\t\t\tReturn _instance\r\n" +
                                      "\t\t\tEnd Get\r\n" +
                                      "\t\t\tSet(ByVal value As COMObject)\r\n" +
                                       "\t\t\t\tIf LateBindingApi.Core.Utils.IsNothing(value) Or LateBindingApi.Core.Utils.IsNothing(_instance) Then\r\n" +
                                      "\t\t\t\t\t_instance = value\r\n" +
                                      "\t\t\t\tEnd If\r\n" +
                                      "\t\t\tEnd Set\r\n" +
                                      "\t\tEnd Property\r\n\r\n" +
                                      "#End Region\r\n";

        private static string _classDesc = "\t''' <summary>\r\n\t''' Module %name%\r\n\t'''</summary>\r\n";

        private static string _classHeader = "\t<EntityTypeAttribute(EntityType.IsModule)> _\r\n" + "\tPublic Module %name%\r\n\r\n";

        internal static string ConvertModulesToFiles(XElement projectNode, XElement facesNode, Settings settings, string solutionFolder)
        {
            string faceFolder = System.IO.Path.Combine(solutionFolder, projectNode.Attribute("Name").Value);
            faceFolder = System.IO.Path.Combine(faceFolder, "Modules");
            if (false == System.IO.Directory.Exists(faceFolder))
                System.IO.Directory.CreateDirectory(faceFolder);

            string result = "";
            foreach (XElement faceNode in facesNode.Elements("Module"))
                result += ConvertModuleToFile(settings, projectNode, faceNode, faceFolder) + "\r\n";

            foreach (XElement item in projectNode.Element("CoClasses").Elements("CoClass"))
            {
                if(item.Attribute("IsAppObject").Value == "true")
                {
                    result += ConvertGlobalModuleToFile(settings, projectNode, item, faceFolder) + "\r\n";
                    break;
                }
            } 
             
            return result;
        }

        private static string ConvertModuleToFile(Settings settings, XElement projectNode, XElement faceNode, string faceFolder)
        {
            string fileName = System.IO.Path.Combine(faceFolder, faceNode.Attribute("Name").Value + ".vb");

            string newEnum = ConvertModuleToString(settings, projectNode, faceNode);
            System.IO.File.AppendAllText(fileName, newEnum);

            int i = faceFolder.LastIndexOf("\\");
            string result = "\t\t<Compile Include=\"" + faceFolder.Substring(i + 1) + "\\" + faceNode.Attribute("Name").Value + ".vb" + "\" />";
            return result;
        }
        
        private static string ConvertModuleToString(Settings settings, XElement projectNode, XElement moduleNode)
        {
            string result = _fileHeader.Replace("%namespace%", projectNode.Attribute("Namespace").Value);
            string attributes = "\t" + VBGenerator.GetSupportByVersionAttribute(moduleNode);
            string header = _classHeader.Replace("%name%", moduleNode.Attribute("Name").Value);
            string classDesc = _classDesc.Replace("%name%", moduleNode.Attribute("Name").Value);
            string methods = MethodApi.ConvertMethodsLateBindToString(settings, moduleNode.Element("Methods"), "Me");

            result += classDesc;
            result += attributes + "\r\n";
            result += header;
            result += methods;
            result += "\tEnd Module\r\nEnd Namespace";
            return result;
        }


        private static string ConvertGlobalModuleToFile(Settings settings, XElement projectNode, XElement faceNode, string faceFolder)
        {
            string fileName = System.IO.Path.Combine(faceFolder, "Globals" + ".vb");

            string newEnum = ConvertGlobalModuleToString(settings, projectNode, faceNode);
            System.IO.File.AppendAllText(fileName, newEnum);

            int i = faceFolder.LastIndexOf("\\");
            string result = "\t\t<Compile Include=\"" + faceFolder.Substring(i + 1) + "\\" + "Globals" + ".vb" + "\" />";
            return result;
        }
        

        private static string ConvertGlobalModuleToString(Settings settings, XElement projectNode, XElement moduleNode)
        {
            string result = _fileHeader.Replace("%namespace%", projectNode.Attribute("Namespace").Value);
            string attributes = "\t" + VBGenerator.GetSupportByVersionAttribute(moduleNode);
            string header = _classHeader.Replace("%name%","[Globals]");
            string classDesc = _classDesc.Replace("%name%", "[Globals]");

            XElement interfaceNode = VBGenerator.GetInterfaceOrClassFromKey(moduleNode.Element("Inherited").Elements("Ref").Last().Attribute("Key").Value);

            string properties = PropertyApi.ConvertPropertiesLateBindToString(settings, interfaceNode.Element("Properties"), "_instance");
            string methods = MethodApi.ConvertMethodsLateBindToString(settings, interfaceNode.Element("Methods"), "_instance");

            result += classDesc;
            result += attributes + "\r\n";
            result += header;
            result += _fieldHeader;
            result += properties;
            result += methods;
            result += "\tEnd Module\r\nEnd Namespace";
            return result;
        }

    }
}
