		#region Fields
		
		static string _activeSinkId;
%sinkHelperDefine%	
		#endregion
		
		#region Construction

        /// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public %name%(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
			CreateEventBridge();
		}
		
		/// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        /// <param name="comProxyType">Type of inner wrapped COM proxy"</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public %name%(COMObject parentObject, object comProxy, NetRuntimeSystem.Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
			CreateEventBridge();
		}
		
		/// <param name="replacedObject">object to replaced. replacedObject are not usable after this action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public %name%(COMObject replacedObject) : base(replacedObject)
		{
		}
		
		public %name%()
		{
			CreateFromProgId("%ProgId%");
			CreateEventBridge();
		}
		
		/// <param name="progId">progId</param>
		public %name%(string progId)
		{
			CreateFromProgId(progId);
			CreateEventBridge();
		}

		#endregion
		
		#region Private Methods
		
		/// <summary>
        /// creates active sink helper
        /// </summary>
		private void CreateEventBridge()
        {
			if(false == LateBindingApi.Core.Settings.EnableEvents)
				return;
            
            if (null == _activeSinkId)
            {
                string[] eventInterfaceIds = SinkHelper.GetEventInterfaces(this);
                foreach (string item in eventInterfaceIds)
                {
%CompareActiveId%
                }
            }
%SetActiveSink% 
        }

		#endregion