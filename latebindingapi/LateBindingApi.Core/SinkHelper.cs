// Generated by LateBindingApi.CodeGenerator
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;
using ComTypes = System.Runtime.InteropServices.ComTypes;

namespace LateBindingApi.Core
{
    /// <summary>
    /// Sink Helper Base Class for an Event Interface Sink helper class
    /// </summary>
    public abstract class SinkHelper : IDisposable
    {
        #region Fields

        private static List<SinkHelper> _pointList = new List<SinkHelper>();
        private COMObject _eventClass;
        private IConnectionPoint _connectionPoint;
        private int _connectionCookie;
        private Guid _interfaceId;

        #endregion

        #region Construction

        /// <summary>
        /// creates instance
        /// </summary>
        /// <param name="eventClass"></param>
        public SinkHelper(COMObject eventClass)
        {
            _eventClass = eventClass;
        }

        #endregion

        #region Static Methods

        /// <summary>
        /// try to find connection point by FindConnectionPoint
        /// </summary>
        /// <param name="connectionPointContainer"></param>
        /// <param name="point"></param>
        /// <param name="sinkIds"></param>
        /// <returns></returns>
        private static string FindConnectionPoint(IConnectionPointContainer connectionPointContainer, ref IConnectionPoint point, params string[] sinkIds)
        {
            try
            {
                for (int i = sinkIds.Length; i > 0; i--)
                {
                    Guid refGuid = new Guid(sinkIds[i - 1]);
                    IConnectionPoint refPoint = null;
                    connectionPointContainer.FindConnectionPoint(ref refGuid, out refPoint);
                    if (null != refPoint)
                    {
                        point = refPoint;
                        return sinkIds[i-1];
                    }
                }

                return null;
            }
            catch(Exception throwedException)
            {
                DebugConsole.WriteException(throwedException);
                return null;
            }
        }

        /// <summary>
        /// try to find connection point by EnumConnectionPoints
        /// </summary>
        /// <param name="connectionPointContainer"></param>
        /// <param name="point"></param>
        /// <param name="sinkIds"></param>
        /// <returns></returns>
        private static string EnumConnectionPoint(IConnectionPointContainer connectionPointContainer, ref IConnectionPoint point, params string[] sinkIds)
        {
            IConnectionPoint[] points = new IConnectionPoint[1];
            IEnumConnectionPoints enumPoints = null;
            try
            {
                connectionPointContainer.EnumConnectionPoints(out enumPoints);
                while (enumPoints.Next(1, points, IntPtr.Zero) == 0) // S_OK = 0 , S_FALSE = 1
                {
                    if (null == points[0])
                        break;

                    Guid interfaceGuid;
                    points[0].GetConnectionInterface(out interfaceGuid);

                    for (int i = sinkIds.Length; i > 0; i--)
                    {
                        string id = interfaceGuid.ToString().Replace("{", "").Replace("}", "");
                        if (true == sinkIds[i - 1].Equals(id, StringComparison.InvariantCultureIgnoreCase))
                        {
                            Marshal.ReleaseComObject(enumPoints);
                            enumPoints = null;
                            point = points[0];
                            return id;
                        }
                    }
                }
                return null;
            }
            catch (Exception throwedException)
            {
                DebugConsole.WriteException(throwedException);
                return null;
            }
            finally
            { 
                if(null != enumPoints)
                    Marshal.ReleaseComObject(enumPoints);
            }
        }

        /// <summary>
        /// get supported connection point from comProxy
        /// </summary>
        /// <param name="comProxy"></param>
        /// <param name="point"></param>
        /// <param name="sinkIds"></param>
        /// <returns></returns>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public static string GetConnectionPoint(COMObject comProxy, ref IConnectionPoint point, params string[] sinkIds)
        {
            if (null == sinkIds)
                return null;            

            IConnectionPointContainer connectionPointContainer = (IConnectionPointContainer)comProxy.UnderlyingObject;

            if (Settings.EnableDebugOutput)
                DebugConsole.WriteLine(comProxy.UnderlyingTypeName + ".GetConnectionPoint");

            if (Settings.EnableDebugOutput)
                DebugConsole.WriteLine(comProxy.UnderlyingTypeName + ".FindConnectionPoint");
           
            string id = FindConnectionPoint(connectionPointContainer, ref point, sinkIds);

            if (Settings.EnableDebugOutput)
                DebugConsole.WriteLine(comProxy.UnderlyingTypeName + ".FindConnectionPoint sucseed");

            if (null == id)
            {
                if (Settings.EnableDebugOutput)
                    DebugConsole.WriteLine(comProxy.UnderlyingTypeName + ".EnumConnectionPoint");
                id = EnumConnectionPoint(connectionPointContainer, ref point, sinkIds);
                if (Settings.EnableDebugOutput)
                    DebugConsole.WriteLine(comProxy.UnderlyingTypeName + ".EnumConnectionPoint sucseed");
            }

            if (Settings.EnableDebugOutput)
                DebugConsole.WriteLine(comProxy.UnderlyingTypeName + ".GetConnectionPoint passed.");

            if (null != id)
                return id;
            else
                throw new COMException("Specified instance doesnt implement the target event interface.");
        }

        /// <summary>
        /// Dispose all active event bridges
        /// </summary>
        public static void DisposeAll()
        {
            foreach (SinkHelper point in _pointList)
                point.RemoveEventBinding(false);
            _pointList.Clear();
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// create event binding
        /// </summary>
        /// <param name="connectPoint"></param>
        public void SetupEventBinding(IConnectionPoint connectPoint)
        {
            try
            {
                if (true == Settings.EnableEvents)
                {
                    connectPoint.GetConnectionInterface(out _interfaceId);
                    _connectionPoint = connectPoint;
                    _connectionPoint.Advise(this, out _connectionCookie);
                    _pointList.Add(this);
                }
            }
            catch (Exception throwedException)
            {
                DebugConsole.WriteException(throwedException);
                throw (throwedException);
            }
        }

        /// <summary>
        /// release event binding
        /// </summary>
        public void RemoveEventBinding()
        {
            RemoveEventBinding(true);
        }

        /// <summary>
        /// release event binding
        /// </summary>
        private void RemoveEventBinding(bool removeFromList)
        {
            if (_connectionCookie != 0)
            {
                try
                {
                    _connectionPoint.Unadvise(_connectionCookie);
                    Marshal.ReleaseComObject(_connectionPoint);
                }
                catch (System.Runtime.InteropServices.COMException throwedException)
                {
                    DebugConsole.WriteException(throwedException);
                    ; // RPC server is disconnected or dead
                }
                catch (Exception throwedException)
                {
                    DebugConsole.WriteException(throwedException);
                    throw (throwedException);
                }

                _connectionPoint = null;
                _connectionCookie = 0;

                if(removeFromList)
                    _pointList.Remove(this);
            }
        }

        #endregion

        #region IDisposable Members

        /// <summary>
        /// remove eventbinding
        /// </summary>
        public void Dispose()
        {
            RemoveEventBinding();
        }

        #endregion
    }
}
