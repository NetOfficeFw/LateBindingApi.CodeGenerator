// Generated by LateBindingApi.CodeGenerator
using System;
using System.Collections.Generic; 
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;

namespace LateBindingApi.Core
{
    /// <summary>
    /// Sink Helper Base Class for an Event Interface Sink helper class
    /// </summary>
    public abstract class SinkHelper : IDisposable
    {
        #region Fields

        private COMObject        _eventClass;
        private IConnectionPoint _connectionPoint;
        private int              _connectionCookie;
        private Guid             _interfaceId;

        #endregion

        #region Construction

        public SinkHelper(COMObject eventClass)
        {
            _eventClass = eventClass;
        }

        #endregion

        #region Static Methods

        /// <summary>
        /// Gets all supported Event Interfaces from comProxy as id array
        /// </summary>
        /// <param name="comProxy"></param>
        /// <returns></returns>
        public static string[] GetEventInterfaces(COMObject comProxy)
        {
            List<string> result = new List<string>();

            IConnectionPointContainer connectionPointContainer = (IConnectionPointContainer)comProxy.UnderlyingObject;
            IEnumConnectionPoints enumPoints = null;
            connectionPointContainer.EnumConnectionPoints(out enumPoints);
            enumPoints.Reset();

            IConnectionPoint[] points = new IConnectionPoint[1];
            while (enumPoints.Next(1, points, IntPtr.Zero) == 0)
            {
                if (null == points[0])
                    break; 

                Guid interfaceGuid;
                points[0].GetConnectionInterface(out interfaceGuid);
                result.Add(interfaceGuid.ToString());
                Marshal.ReleaseComObject(points[0]);
            }

            string[] resultArray = new string[result.Count];
            int y = 0;
            for (int i = result.Count; i > 0; i--)
            {
                resultArray[y] = result[i - 1];
                y++;
            }

            return resultArray;
        }

        public static string GetConnectionPoint(COMObject comProxy, ref IConnectionPoint point, params string[] sinkIds)
        {
            if (null == sinkIds)
                return null;

            IConnectionPointContainer connectionPointContainer = (IConnectionPointContainer)comProxy.UnderlyingObject;
            IEnumConnectionPoints enumPoints = null;
            connectionPointContainer.EnumConnectionPoints(out enumPoints);
            IConnectionPoint[] points = new IConnectionPoint[1];
            while (enumPoints.Next(1, points, IntPtr.Zero) == 0) // S_OK = 0 , S_FALSE = 1
            {
                if (null == points[0])
                    break;

                Guid interfaceGuid;
                points[0].GetConnectionInterface(out interfaceGuid);

                for (int i = sinkIds.Length; i >= 0; i--)
                {
                    string id = interfaceGuid.ToString().Replace("{", "").Replace("}", "");
                    if (true == sinkIds[i - 1].Equals(id, StringComparison.InvariantCultureIgnoreCase))
                    {
                        Marshal.ReleaseComObject(enumPoints);
                        point = points[0];
                        return id;
                    }
                }
            }

            Marshal.ReleaseComObject(enumPoints);
            return null;
        }

        #endregion

        #region Public Methods

        public void SetupEventBinding(string guid)
        {
            _interfaceId = new Guid(guid);
            if (true == Settings.EnableEvents)
            {
                IConnectionPointContainer connectionPointContainer = (IConnectionPointContainer)_eventClass.UnderlyingObject;
                connectionPointContainer.FindConnectionPoint(ref _interfaceId, out _connectionPoint);
                _connectionPoint.Advise(this, out _connectionCookie);
            }
        }

        public void SetupEventBinding(IConnectionPoint connectPoint)
        {
            if (true == Settings.EnableEvents)
            {
                _connectionPoint = connectPoint;
                _connectionPoint.Advise(this, out _connectionCookie);
            }
        }

        public void RemoveEventBinding()
        {
            if (_connectionCookie != 0)
            {
                _connectionPoint.Unadvise(_connectionCookie);
                Marshal.ReleaseComObject(_connectionPoint);
                _connectionPoint = null;
                _connectionCookie = 0;
            }
        }

        #endregion

        #region IDisposable Members

        public void Dispose()
        {
            RemoveEventBinding();
        }
        
        #endregion
    }
}
