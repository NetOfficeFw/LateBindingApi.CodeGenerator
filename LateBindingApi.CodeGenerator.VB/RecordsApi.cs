using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using System.Text;

namespace LateBindingApi.CodeGenerator.VB
{
    internal static class RecordsApi
    {
        private static string _fileHeader = "'Generated by LateBindingApi.CodeGenerator\r\n"
                                               + "Imports System\r\n"
                                               + "Imports System.Runtime.InteropServices\r\n"
                                               + "Imports NetOffice\r\n"
                                               + "Namespace %namespace%\r\n"
                                               + "\r\n";

        internal static string ConvertRecordsToFiles(XElement projectNode, XElement enumsNode, Settings settings, string solutionFolder)
        {
            string enumFolder = System.IO.Path.Combine(solutionFolder, projectNode.Attribute("Name").Value);
            enumFolder = System.IO.Path.Combine(enumFolder, "Records");
            if (false == System.IO.Directory.Exists(enumFolder))
                System.IO.Directory.CreateDirectory(enumFolder);

            string result = "";
            foreach (XElement enumNode in enumsNode.Elements("Record"))
                result += ConvertRecordToFile(settings, projectNode, enumNode, enumFolder) + "\r\n";

            return result;
        }

        private static string ConvertRecordToFile(Settings settings, XElement projectNode, XElement enumNode, string enumFolder)
        {
            string fileName = System.IO.Path.Combine(enumFolder, enumNode.Attribute("Name").Value + ".vb");

            string newEnum = ConvertRecordToString(settings, projectNode, enumNode);
            System.IO.File.AppendAllText(fileName, newEnum);

            int i = enumFolder.LastIndexOf("\\");
            string result = "\t\t<Compile Include=\"" + enumFolder.Substring(i + 1) + "\\" + enumNode.Attribute("Name").Value + ".vb" + "\" />";
            return result;
        }

        private static string ConvertRecordToString(Settings settings, XElement projectNode, XElement enumNode)
        {
            string result = _fileHeader.Replace("%namespace%", projectNode.Attribute("Namespace").Value );
            string enumAttributes = VBGenerator.GetSupportByVersionAttribute(enumNode);
            
            string comConversion = "<StructLayout(LayoutKind.Sequential), ";
            string typeLibType = enumNode.Attribute("TypeLibType").Value;
            typeLibType = "ComConversionLoss, TypeLibType(" + typeLibType + ")> _"; //(short) 

            comConversion += typeLibType;
           
            string name = enumNode.Attribute("Name").Value;

            if(true == settings.CreateXmlDocumentation)
                result += VBGenerator.GetSupportByVersionSummary("\t", enumNode);

            result += "\t" + enumAttributes + Environment.NewLine;
            result += "\t" + comConversion + "\r\n";
            result += "\t<EntityTypeAttribute(EntityType.IsStruct)> _\r\n" + "\tPublic Structure " + name + Environment.NewLine + "\t" + Environment.NewLine;

            int countOfMembers = enumNode.Element("Members").Elements("Member").Count();
            int i = 1;
            foreach (var itemMember in enumNode.Element("Members").Elements("Member"))
            {
                string arr = "";
                if ("true" == itemMember.Attribute("IsArray").Value)
                    arr = "()";

                string memberAttribute = VBGenerator.GetSupportByVersionAttribute(itemMember);
                
                string memberType = "";
                if ("true" == itemMember.Attribute("IsNative").Value)
                    memberType = ParameterApi.ValidateVarTypeVB(itemMember.Attribute("Type").Value);
                else
                    memberType = "Object";

                string memberName = itemMember.Attribute("Name").Value;

                if (true == settings.CreateXmlDocumentation)
                    result += VBGenerator.GetSupportByVersionSummary("\t\t", itemMember);
                result += "\t\t" + memberAttribute + "\r\n";

                string marshalAs = itemMember.Attribute("MarshalAs").Value;
                if ("" != marshalAs)
                { 
                    marshalAs = "\t\t<MarshalAs(" + marshalAs + ")> _\r\n";
                    result += marshalAs;
                }

                result += "\t\t" + "Public " + memberName + arr + " As " + memberType;
                result += "\r\n";
               
                i++;
            }

            result += "\tEnd Structure" + Environment.NewLine + Environment.NewLine;
            result += "End Namespace";
            return result;
        }
    }
}
