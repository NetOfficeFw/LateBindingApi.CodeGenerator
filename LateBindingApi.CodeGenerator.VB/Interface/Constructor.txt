		#region "Type Information"

        Private Shared _type As Type 

		<EditorBrowsable(EditorBrowsableState.Never), Browsable(false)> _
        Public Shared ReadOnly Property LateBindingApiWrapperType() As Type
			Get
				if(NetOffice.Utils.IsNothing(_type)) Then
				 _type = GetType(%name%)
				End If
				Return _type
			End Get
		End Property
    
        #End Region
        
		#Region "Construction"

        ''' <param name="parentObject">object there has created the proxy</param>
        ''' <param name="comProxy">inner wrapped COM proxy</param>
        <EditorBrowsable(EditorBrowsableState.Never), Browsable(false)> _
		Public Sub New(parentObject As COMObject, comProxy As object)
			MyBase.New(parentObject, comProxy)
		End Sub
		 
		''' <param name="parentObject">object there has created the proxy</param>
        ''' <param name="comProxy">inner wrapped COM proxy</param>
        ''' <param name="comProxyType">Type of inner wrapped COM proxy"</param>
        <EditorBrowsable(EditorBrowsableState.Never), Browsable(false)> _
		Public Sub New(parentObject As COMObject, comProxy As object, comProxyType As NetRuntimeSystem.Type)
			MyBase.New(parentObject, comProxy, comProxyType)
		End Sub
		
		''' <param name="replacedObject">object to replaced. replacedObject are not usable after this action</param>
		<EditorBrowsable(EditorBrowsableState.Never), Browsable(false)> _
		Public Sub New(replacedObject As COMObject)
			MyBase.New(replacedObject)
		End Sub
		
		<EditorBrowsable(EditorBrowsableState.Never), Browsable(false)> _
		Public Sub New()
			MyBase.New()
		End Sub
		
		''' <param name="progId">registered ProgID</param> _
		<EditorBrowsable(EditorBrowsableState.Never), Browsable(false)> _
		Public Sub New(progId As String)
			MyBase.New(progId)
		End Sub
		
		#End Region
		